{
    "contents" : "rm(list=ls())\nsetwd(\"/media/arman/9E5E44475E441A83/Users/arman/Documents/R/digit-recognition(kaggle)\")\nsetwd(\"~/R/digit-recognition(kaggle)\")\nsource(\"symmetry.R\")\nsource(\"plotDigit.R\")\nsource(\"rotateMatrix.R\")\n\ntab5rows <- read.csv(\"train.csv\", header = TRUE, nrows = 5)\nclasses <- sapply(tab5rows, class)\npixels <- as.matrix(read.csv(\"train.csv\", header = TRUE, colClasses = classes))\npixels <- read.csv(\"train.csv\", header = TRUE, colClasses = classes)\n\npixels = pixels[order(pixels[,1]) , ]\nrm(tab5rows)\nrm(classes)\nlables = pixels[ , 1]\npixels = pixels[ , -1]\ndim(pixels)\n\n#add feature\nsource(\"symmetry.R\")\nsource(\"symmetry2.R\")\n\nsym = apply(pixels , 1, symmetry2)\nsym = t(sym)\ndim(sym)\n#fit and prediction\nData = cbind(lables , sym)\ncolnames(Data) = c(\"lables\", \"sum\" ,\"sum1\" , \"sum2\" ,\"sum3\" , \"sum4\" ,\"s1_s2\" , \"s3_s4\" , \"s1_s3\" , \"s2_s4\" , \"s1_s4\" , \"s2_s3\")\ncolnames(Data) = c(\"lables\", 1:49)\n\nmyData = data.frame(Data)\nalwaysZero = apply (myData , 2 ,mean)\nmyData = myData[ , alwaysZero!=0]\ndim(myData)\n\n#attach(myData)\n#myfit = glm(lables ~ s1_s2 + s3_s4 + s1_s3 + s2_s4+ s1_s4 +s2_s3 ,Data = myData , family = binomial)\n\nlibrary(MASS)\nlables\nind1ya7 = lables==1\nmyData$lables[ind1ya7]=1\nmyData$lables[!ind1ya7]=0\nmyData$lables = lables\n\nlda.fit=lda(lables ~ . ,data = myData[1:8000 , ])\nlda.fit\nlda.pred=predict(lda.fit, myData[8001:10000,])\nView(lda.pred)\ntable(lda.pred$class , myData[8001:10000,]$lables)\nsum(lda.pred$class!=myData[8001:10000,]$lables)/2000\n\nlda.fit=lda(label ~. ,data = pixels)\nm = apply(pixels , 2 , mean)\nView(m)\nsum(m==0)\npixels = pixels[,m!=0]\nlda.pred=predict(lda.fit, pixels)\nView(lda.pred)\ntable(lda.pred$class , myData[8001:10000,]$lables)\nsum(lda.pred$class!=myData[8001:10000,]$lables)/4200\n\n\n\n#visualizing data\nf <- function(m) t(m)[,nrow(m):1]\npar(mfrow = c(1,2))\nwhile(TRUE){\n  #i=sample(1:4200 , 1)\n  i=i+1\n  M = matrix(pixels[i,],c(28,28) , byrow =TRUE)\n  #M[M<=100] = 0\n  #M[M>100] = 1  \n  image(f(M))\n  for(j in 0:7){\n    abline(h = j*(1/7))\n  }\n  for(j in 0:7){\n    abline(v = j*(1/7))\n  }\n  \n  #A = rotateMatrix(M, pi/8)\n  #image(f(A))\n  \n  Sys.sleep(2)\n}\n\n#plot as a 2 col\nfor(i in 500*1:4){\n  a = matrix(pixels[i,-1],c(28,28))\n  #a[a>120] = 151\n  #a[a<=120] = 0\n  a[a>30] = 151\n  a[a<=30] = 0\n  \n  plotDigit(a ,col = grey(seq(1, 0, length = 2)))  \n}\n\npix = pixels[1:100 , ]\nlab = lables[1:100 ]\npix\n\n\n#test\ni=\ns = symmetry(pixels[i,])\ns\nplotDigit(matrix(pixels[i,-1],c(28,28)) ,col = grey(seq(1, 0, length = 2)))\n\n#constructing as a matrix\nmymatrix <-function(x){\n  x = matrix(x,c(28,28) , byrow=TRUE)\n  colnames(x) = c(-14:-1 , 1:14)\n  rownames(x) = c(14:1 ,-1:-14)\n  x\n}\n\n# Mirror matrix (left-right)\nmirror.matrix <- function(x) {\n  xx <- as.data.frame(x);\n  xx <- rev(xx);\n  xx <- as.matrix(xx);\n  xx;\n}\n\nind <- function(i ,j){\n  if(i>0){\n    a= a+14\n  }\n  else if(i<0){\n    \n  }\n}\n\n#matrixRotations\n\n# Flip matrix (upside-down)\nflip.matrix <- function(x) {\n  mirror.matrix(rotate180.matrix(x))\n}\n\n# Mirror matrix (left-right)\nmirror.matrix <- function(x) {\n  xx <- as.data.frame(x);\n  xx <- rev(xx);\n  xx <- as.matrix(xx);\n  xx;\n}\n\n# Rotate matrix 90 clockworks\nrotate90.matrix <- function(x) {\n  t(mirror.matrix(x))\n}\n\n# Rotate matrix 180 clockworks\nrotate180.matrix <- function(x) { \n  xx <- rev(x);\n  dim(xx) <- dim(x);\n  xx;\n}\n\n# Rotate matrix 270 clockworks\nrotate270.matrix <- function(x) {\n  mirror.matrix(t(x))\n}\n\n\nsource(\"hole.R\")\n\nhole(pixels[5,])\n\n\n\n",
    "created" : 1436477497560.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "243807053",
    "id" : "6F259244",
    "lastKnownWriteTime" : 1435219515,
    "path" : "E:/last back up/Documents/R/digit-recognition(kaggle)/myWork.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}